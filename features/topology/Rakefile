# Copyright (C) 2009-2014 MongoDB, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

require 'json'
require 'github/markup'
require 'pp'

FEATURES_TOPOLOGY_BASE = 'https://github.com/mongodb/mongo-meta-driver/tree/master/features/topology'

def print_step(step, io)
  step.each do |key, value|
    case key
      when 'comments'
        # value.each{|element| io.puts "    #{element['value']} " }
        # io.puts
      when 'line'
      when 'match'
      when 'result'
      when 'keyword'
        io.print "#. **#{value.strip}** "
      when 'name'
        io.puts value
      else
        puts "step key: #{key}"
        pp value
    end
  end
end

def print_row(row, io)
  row.each do |key, value|
    case key
      when 'id'
      when 'line'
      when 'cells'
        io.puts "    | #{value.join(' | ')} |"
      when 'comments'
        # value.each{|element| io.puts "    #{element['value']} " }
      else
        puts "row key: #{key}"
        pp value
    end
  end
end

def print_example(example, io)
  example.each do |key, value|
    case key
      when 'keyword'
      when 'name'
      when 'line'
      when 'description'
        io.puts "\nDescription:\n\n#{value.gsub(/^/, '    ')}" unless value.empty?
        io.puts
      when 'id'
      when 'rows'
        value.each{|element| print_row(element, io) }
      else
        puts "example key: #{key}"
        pp value
    end
  end
end

def print_scenario(scenario, io)
  scenario.each do |key, value|
    case key
      when 'keyword'
      when 'line'
      when 'id'
      when 'type'
      when 'name'
        heading = "Scenario: #{value}"
        io.puts "\n\n#{heading}\n#{heading.gsub(/./, "'")}"
      when 'description'
        io.puts "\nDescription:\n\n#{value.gsub(/^/, '    ')}" unless value.empty?
        io.puts
      when 'steps'
        io.puts "\nSteps:"
        io.puts
        value.each{|element| print_step(element, io) }
      when 'tags'
        io.puts "\nTags: #{value.collect{|tag| "`#{tag['name']}`"}.join(' ')}"
      when 'examples'
        io.puts "\nExamples:"
        io.puts
        value.each{|element| print_example(element, io) }
        io.puts
      when 'comments'
        # value.each{|element| io.puts "    #{element['value']} " }
        # io.puts
      else
        puts "scenario key: #{key}"
        pp value
    end
  end
end

def print_feature(feature, io)
  feature.each do |h|
    h.each do |key, value|
      case key
        when 'comments'
          # value.each{|element| io.puts "    #{element['value']} " }
          # io.puts
        when 'keyword'
        when 'line'
        when 'id'
        when 'uri'
          io.puts "\nURI:\n\n    #{FEATURES_TOPOLOGY_BASE}/#{value}"
          io.puts
        when 'name'
          heading = "Feature: #{value}"
          io.puts "\n\n#{heading}\n#{heading.gsub(/./, '-')}"
        when 'description'
          io.puts "\nDescription:\n\n#{value.gsub(/^/, '    ')}"
          io.puts
        when 'elements'
          value.each{|element| print_scenario(element, io) }
        else
          puts "feature key: #{key}"
          pp value
      end
    end
  end
end

def print_autogenerated(io)
  io.print <<-EOT.gsub(/^    /,'')

    ----

        This file is auto-generated. Please do not edit this file, instead please edit the sources.

    ----

  EOT
end

namespace :features do
  spec = 'common-topology-test-suite.rst'
  task :spec do
    report = 'report.rst'
    File.open(spec, 'w') do |file|
      print_autogenerated(file)
      file.print File.read(report)
      file.print <<-EOT.gsub(/^ +/,'')


        Full Specification - Feature Descriptions
        =========================================

      EOT
      features = %w[
        standalone/connection.feature
        replica_set/connection.feature
        replica_set/read_preference.feature
        replica_set/write_concern.feature
        replica_set/configuration.feature
        sharded_cluster/connection.feature
        sharded_cluster/configuration.feature
      ]
      features.each do |feature|
        json = `cucumber --dry-run --format json --require test/topology #{feature}`
        feature = JSON.parse(json)
        print_feature(feature, file)
      end
      print_autogenerated(file)
    end
  end
  task :preview => :spec do
    preview = spec.sub('.rst', '.html')
    #pip install docutils
    #sh "rst2html.py #{spec} #{preview}"
    File.open(preview, 'w') do |file|
      file.write(GitHub::Markup.render(spec))
    end
  end
end

task :default => 'features:preview'
